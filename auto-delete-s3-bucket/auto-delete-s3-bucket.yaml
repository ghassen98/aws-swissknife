AWSTemplateFormatVersion: '2010-09-09'
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "test-bucket-${AWS::AccountId}"

  CleanupBucket:
    Type: 'Custom::CleanupBucket'
    Properties:
      ServiceToken: !GetAtt CleanupFunction.Arn
      BucketName: !Ref S3Bucket

  CleanupFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'

  CleanupFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CleanupFunctionRole.Arn
      Code:
        ZipFile: |
            import json
            import boto3
            import urllib3

            http = urllib3.PoolManager()
            
            def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None):
                responseUrl = event['ResponseURL']

                print("Response url:")
                print(responseUrl)

                print("responseData:")
                print(responseData)

                responseBody = {
                    'Status' : responseStatus,
                    'Reason' : reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),
                    'PhysicalResourceId' : physicalResourceId or context.log_stream_name,
                    'StackId' : event['StackId'],
                    'RequestId' : event['RequestId'],
                    'LogicalResourceId' : event['LogicalResourceId'],
                    'NoEcho' : noEcho,
                    'Data' : responseData
                }

                print("responseBody:")
                print(responseBody)

                json_responseBody = json.dumps(responseBody)

                print("json response body:")
                print(json_responseBody)

                headers = {
                    'content-type' : '',
                    'content-length' : str(len(json_responseBody))
                }

                try:
                    response = http.request('PUT', responseUrl, headers=headers, body=json_responseBody)
                    print("Status code:", response.status)

                except Exception as e:
                    print("send(..) failed executing http.request(..):", e)

            def lambda_handler(event, context):
                s3 = boto3.resource('s3')
                bucket = s3.Bucket(event['ResourceProperties']['BucketName'])
                if event['RequestType'] == 'Delete':
                    for obj in bucket.objects.all():
                        obj.delete()
                response_data = {
                    'Status': 'SUCCESS'
                }
                send(event, context, 'SUCCESS', response_data)
      Runtime: python3.12