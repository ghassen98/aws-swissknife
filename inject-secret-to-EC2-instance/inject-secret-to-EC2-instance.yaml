AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  InstanceId:
    Description: "Choisir une instance EC2 existante"
    Type: AWS::EC2::Instance::Id

Resources:
  CredentialSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: CredentialSecret
      Description: "Credentials pour injecter dans la EC2 instance"
      SecretString: '{"username":"admin","password":"password"}'

  UpdateCredentialSecretLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt UpdateCredentialSecretLambdaExecutionRole.Arn
      Timeout: 180
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              secret_name = event['detail']['requestParameters']['secretId']
              client = boto3.client('secretsmanager')
              response = client.get_secret_value(SecretId=secret_name)
              secret_info = response['SecretString']
              secret_info = secret_info.replace('"', "'")
              ssm_client = boto3.client('ssm')

              # Get instance ID and SSM Document Arn from environment variable
              instance_id = os.environ.get('instanceId')
              document_arn = os.environ.get('documentArn')

              ssm_client.send_command(
                  InstanceIds=[instance_id,],
                  DocumentName=document_arn,
                  Parameters={'secret': [str(secret_info)]}
              )
      Runtime: python3.12
      Environment:
        Variables:
          instanceId: !Ref InstanceId
          documentArn: !Join
            - ""
            - 
              - "arn:"
              - !Ref "AWS::Partition"
              - ":ssm:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":document/"
              - !Ref UpdateCredentialSecretSSMDocument

  UpdateCredentialSecretLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                  - ssm:SendCommand
                Resource: '*'

  AmazonEventBridgeInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokeFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt UpdateCredentialSecretLambda.Arn

  UpdateCredentialSecretSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: "Document to inject credentials secret values to the EC2 instance"
        parameters:
          secret:
            default: ""
            description: "secret values to use"
            type: "String"
        mainSteps:
          - action: "aws:runPowerShellScript"
            name: updateSecret
            precondition:
              StringEquals:
              - "platformType"
              - "Windows"
            inputs:
              runCommand: 
              - |
                # Importer le module WebAdministration
                Import-Module WebAdministration
                
                # Convertir le secret JSON en objet PowerShell
                $secretConfigJson = "{{secret}}" | ConvertFrom-Json
            
                $Username = $secretConfigJson.username
                $Password = $secretConfigJson.password
            
                # Écrire les informations du secret dans un fichier sur D:\
                $SecretFilePath = "D:\secret.txt"
                $SecretContent = "username=$Username`npassword=$Password"
                Set-Content -Path $SecretFilePath -Value $SecretContent -Force

                Write-Host "Fichier de secret créé avec succès à $SecretFilePath"

  SecretUpdateEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.secretsmanager"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateSecret"
            - "UpdateSecret"
            - "DeleteSecret"
            - "PutSecretValue"
          requestParameters:
            secretId:
              - !Ref CredentialSecret
      Targets:
        - Arn: !GetAtt UpdateCredentialSecretLambda.Arn
          Id: "UpdateCredentialSecretLambdaTarget"
          RoleArn: !GetAtt AmazonEventBridgeInvokeLambdaRole.Arn

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref UpdateCredentialSecretLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt SecretUpdateEventRule.Arn
